{"version":3,"sources":["webpack:///./src/components/Spinner.vue?7726","webpack:///./src/views/admin-layout/product/edit-product.vue","webpack:///./src/components/admin-layout/product/edit-product/EditProductTemplate.vue","webpack:///./src/components/admin-layout/product/edit-product/EditProductTemplate.vue?a50e","webpack:///./src/components/admin-layout/product/edit-product/EditProductTemplate.vue?a26e","webpack:///./src/views/admin-layout/product/edit-product.vue?1afd","webpack:///./src/views/admin-layout/product/edit-product.vue?4cee","webpack:///./src/components/Spinner.vue","webpack:///./src/components/Spinner.vue?2236","webpack:///./src/components/Spinner.vue?8361"],"names":["default","id","fallback","tag","class","onSubmit","col","label","values","name","errors","type","price","rows","description","color","disabled","meta","dirty","valid","props","String","required","components","ErrorField","MDBInput","MDBTextarea","MDBBtn","MDBRow","MDBCol","MDBContainer","setup","toast","store","schema","min","imgUrl","url","notRequired","categoryId","unwatch","watch","getters","getCategoryDropdown","value","reset","validationSchema","initialValues","undefined","Number","success","render","Spinner","EditProductTemplate","MDBSpinner","__scopeId"],"mappings":"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","file":"js/edit-product.3fcdc623.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Spinner.vue?vue&type=style&index=0&id=2d917819&scoped=true&lang=scss\"","<template>\n  <Suspense>\n    <template #default>\n      <EditProductTemplate :id=\"id\" />\n    </template>\n    <template #fallback>\n      <Spinner />\n    </template>\n  </Suspense>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nimport EditProductTemplate from '@/components/admin-layout/product/edit-product/EditProductTemplate.vue'\nimport Spinner from '@/components/Spinner.vue'\n\nexport default defineComponent({\n  name: 'edit-product',\n  components: {\n    Spinner,\n    EditProductTemplate,\n  },\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n})\n</script>\n\n<style scoped lang=\"scss\"></style>\n","<template>\n  <MDBContainer>\n    <MDBRow tag=\"form\" class=\"g-3\" @submit.prevent=\"onSubmit\">\n      <MDBCol\n        col=\"12\"\n        class=\"d-flex justify-content-between align-items-center\"\n      >\n        <div>Category:</div>\n        <!--        <CategoryDropdown />-->\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <MDBInput label=\"Product Name\" v-model=\"values.name\" />\n        <ErrorField>{{ errors.name }}</ErrorField>\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <!--        <ImageUploader />-->\n        <!--        <MDBInput label=\"Image Url\" v-model=\"values.imgUrl\" />-->\n        <!--        <ErrorField>{{ errors.imgUrl }}</ErrorField>-->\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <MDBInput label=\"Price\" type=\"number\" v-model=\"values.price\" />\n        <ErrorField>{{ errors.price }}</ErrorField>\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <MDBTextarea\n          label=\"Description\"\n          rows=\"4\"\n          v-model=\"values.description\"\n        />\n        <ErrorField>{{ errors.description }}</ErrorField>\n      </MDBCol>\n      <MDBCol col=\"12\" class=\"d-flex justify-content-end mb-2\">\n        <MDBBtn\n          color=\"light\"\n          type=\"submit\"\n          :disabled=\"!meta.dirty || !meta.valid\"\n        >\n          Save changes\n        </MDBBtn>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n</template>\n\n<script lang=\"ts\">\nimport {\n  MDBBtn,\n  MDBCol,\n  MDBContainer,\n  MDBInput,\n  MDBRow,\n  MDBTextarea,\n} from 'mdb-vue-ui-kit'\nimport { useField, useForm } from 'vee-validate'\nimport { defineComponent, onUnmounted } from 'vue'\nimport { useToast } from 'vue-toastification'\nimport { number, object, string } from 'yup'\n\nimport { graphqlFetchBy, graphqlUpdate } from '@/services/GraphqlService/GraphqlService'\nimport { GET_PRODUCT_BY_ID } from '@/services/GraphqlService/queries/productQueries'\n// import CategoryDropdown from '@/components/CategoryDropdown/CategoryDropdown.vue'\nimport ErrorField from '@/components/ErrorField.vue'\n// import ImageContainer from '@/components/ImageContainer.vue'\nimport ImageUploader from '@/components/ImageUploader/ImageUploader.vue'\nimport { awaitFetcher } from '@/services/FetchService/FetchService'\nimport { useStore } from '@/store'\nimport { Product, ProductUpdateInput } from '@/types/product'\n\nexport default defineComponent({\n  name: 'EditProductTemplate',\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  components: {\n    // ImageUploader,\n    ErrorField,\n    // CategoryDropdown,\n    MDBInput,\n    MDBTextarea,\n    MDBBtn,\n    MDBRow,\n    MDBCol,\n    MDBContainer,\n  },\n  async setup(props) {\n    const toast = useToast()\n    const store = useStore()\n\n    const schema = object({\n      name: string().required().min(4).label('Product name'),\n      imgUrl: string().required().url().label('Image URL'),\n      price: number().required().min(0).label('Product price'),\n      description: string().notRequired(),\n      categoryId: string().notRequired(),\n    })\n\n    const unwatch = store.watch(\n      () => store.getters.getCategoryDropdown,\n      (value) => {\n        values.categoryId = value\n      },\n    )\n\n    const reset = (): void => {\n      // resetForm()\n      meta.value.valid = false\n    }\n\n    const { values, errors, meta } = useForm({\n      validationSchema: schema,\n      initialValues: {\n        name: '',\n        imgUrl: '',\n        price: undefined,\n        description: '',\n        categoryId: '',\n      },\n    })\n    useField<string>('name')\n    useField<string>('imgUrl')\n    useField<number>('price')\n    useField<string>('description')\n    useField<string>('categoryId')\n\n    const onSubmit = (): void => {\n      values.price = Number(values.price)\n      graphqlUpdate<ProductUpdateInput>('product', props.id, values)\n      reset()\n      toast.success('Product has been updated!')\n    }\n    onUnmounted(() => {\n      unwatch()\n      // store.dispatch('updateCategoryDropdown', undefined)\n    })\n\n    const res = await awaitFetcher<Product>(\n      'NF',\n      `/edit-product-${props.id}`,\n      () => graphqlFetchBy(GET_PRODUCT_BY_ID, { id: props.id! }),\n    )\n    // TODO need to improve this\n    // const { name, imgUrl, price, description, categoryId } = res!\n    // values.name = meta.value.initialValues.name = name\n    // values.imgUrl = meta.value.initialValues.imgUrl = imgUrl\n    // // TODO price's meta dirty does not work\n    // values.price = meta.value.initialValues.price = price\n    // values.description = meta.value.initialValues.description = description\n    // values.categoryId = meta.value.initialValues.categoryId = categoryId\n    // store.dispatch('updateCategoryDropdown', categoryId)\n\n    return {\n      values,\n      errors,\n      meta,\n      onSubmit,\n    }\n  },\n})\n</script>\n\n<style scoped lang=\"scss\"></style>\n","\nimport {\n  MDBBtn,\n  MDBCol,\n  MDBContainer,\n  MDBInput,\n  MDBRow,\n  MDBTextarea,\n} from 'mdb-vue-ui-kit'\nimport { useField, useForm } from 'vee-validate'\nimport { defineComponent, onUnmounted } from 'vue'\nimport { useToast } from 'vue-toastification'\nimport { number, object, string } from 'yup'\n\nimport { graphqlFetchBy, graphqlUpdate } from '@/services/GraphqlService/GraphqlService'\nimport { GET_PRODUCT_BY_ID } from '@/services/GraphqlService/queries/productQueries'\n// import CategoryDropdown from '@/components/CategoryDropdown/CategoryDropdown.vue'\nimport ErrorField from '@/components/ErrorField.vue'\n// import ImageContainer from '@/components/ImageContainer.vue'\nimport ImageUploader from '@/components/ImageUploader/ImageUploader.vue'\nimport { awaitFetcher } from '@/services/FetchService/FetchService'\nimport { useStore } from '@/store'\nimport { Product, ProductUpdateInput } from '@/types/product'\n\nexport default defineComponent({\n  name: 'EditProductTemplate',\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  components: {\n    // ImageUploader,\n    ErrorField,\n    // CategoryDropdown,\n    MDBInput,\n    MDBTextarea,\n    MDBBtn,\n    MDBRow,\n    MDBCol,\n    MDBContainer,\n  },\n  async setup(props) {\n    const toast = useToast()\n    const store = useStore()\n\n    const schema = object({\n      name: string().required().min(4).label('Product name'),\n      imgUrl: string().required().url().label('Image URL'),\n      price: number().required().min(0).label('Product price'),\n      description: string().notRequired(),\n      categoryId: string().notRequired(),\n    })\n\n    const unwatch = store.watch(\n      () => store.getters.getCategoryDropdown,\n      (value) => {\n        values.categoryId = value\n      },\n    )\n\n    const reset = (): void => {\n      // resetForm()\n      meta.value.valid = false\n    }\n\n    const { values, errors, meta } = useForm({\n      validationSchema: schema,\n      initialValues: {\n        name: '',\n        imgUrl: '',\n        price: undefined,\n        description: '',\n        categoryId: '',\n      },\n    })\n    useField<string>('name')\n    useField<string>('imgUrl')\n    useField<number>('price')\n    useField<string>('description')\n    useField<string>('categoryId')\n\n    const onSubmit = (): void => {\n      values.price = Number(values.price)\n      graphqlUpdate<ProductUpdateInput>('product', props.id, values)\n      reset()\n      toast.success('Product has been updated!')\n    }\n    onUnmounted(() => {\n      unwatch()\n      // store.dispatch('updateCategoryDropdown', undefined)\n    })\n\n    const res = await awaitFetcher<Product>(\n      'NF',\n      `/edit-product-${props.id}`,\n      () => graphqlFetchBy(GET_PRODUCT_BY_ID, { id: props.id! }),\n    )\n    // TODO need to improve this\n    // const { name, imgUrl, price, description, categoryId } = res!\n    // values.name = meta.value.initialValues.name = name\n    // values.imgUrl = meta.value.initialValues.imgUrl = imgUrl\n    // // TODO price's meta dirty does not work\n    // values.price = meta.value.initialValues.price = price\n    // values.description = meta.value.initialValues.description = description\n    // values.categoryId = meta.value.initialValues.categoryId = categoryId\n    // store.dispatch('updateCategoryDropdown', categoryId)\n\n    return {\n      values,\n      errors,\n      meta,\n      onSubmit,\n    }\n  },\n})\n","import { render } from \"./EditProductTemplate.vue?vue&type=template&id=e90b9ed6\"\nimport script from \"./EditProductTemplate.vue?vue&type=script&lang=ts\"\nexport * from \"./EditProductTemplate.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\n\nimport EditProductTemplate from '@/components/admin-layout/product/edit-product/EditProductTemplate.vue'\nimport Spinner from '@/components/Spinner.vue'\n\nexport default defineComponent({\n  name: 'edit-product',\n  components: {\n    Spinner,\n    EditProductTemplate,\n  },\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n})\n","import { render } from \"./edit-product.vue?vue&type=template&id=2c13970b\"\nimport script from \"./edit-product.vue?vue&type=script&lang=ts\"\nexport * from \"./edit-product.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <MDBCol\n    class=\"d-flex justify-content-center align-items-center custom-spinner\"\n  >\n    <MDBSpinner color=\"primary\" />\n  </MDBCol>\n</template>\n\n<script lang=\"ts\">\nimport { MDBCol, MDBSpinner } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Spinner',\n  components: {\n    MDBSpinner,\n    MDBCol,\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n.custom-spinner {\n  position: fixed;\n  height: 80vh;\n  width: 100vw;\n}\n</style>\n","\nimport { MDBCol, MDBSpinner } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Spinner',\n  components: {\n    MDBSpinner,\n    MDBCol,\n  },\n})\n","import { render } from \"./Spinner.vue?vue&type=template&id=2d917819&scoped=true\"\nimport script from \"./Spinner.vue?vue&type=script&lang=ts\"\nexport * from \"./Spinner.vue?vue&type=script&lang=ts\"\n\nimport \"./Spinner.vue?vue&type=style&index=0&id=2d917819&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-2d917819\"\n\nexport default script"],"sourceRoot":""}