{"version":3,"sources":["webpack:///./src/components/Spinner.vue?7726","webpack:///./src/components/Spinner.vue","webpack:///./src/components/Spinner.vue?2236","webpack:///./src/components/Spinner.vue?8361","webpack:///./src/views/admin-layout/category/edit-categories.vue","webpack:///./src/components/admin-layout/category/edit-categories/EditCategoriesItem.vue","webpack:///./src/components/admin-layout/category/edit-categories/EditCategoriesItem.vue?db57","webpack:///./src/components/admin-layout/category/edit-categories/EditCategoriesItem.vue?878a","webpack:///./src/views/admin-layout/category/edit-categories.vue?302a","webpack:///./src/views/admin-layout/category/edit-categories.vue?9b2f","webpack:///./src/components/admin-layout/category/edit-categories/EditCategoriesItem.vue?e47f","webpack:///./src/helpers/EventBus.ts"],"names":["class","color","name","components","MDBSpinner","MDBCol","render","__scopeId","loading","data","length","col","to","item","index","key","MDBListGroupItem","props","type","Object","setup","EditCategoriesItem","MDBContainer","MDBRow","MDBListGroup","Spinner","dataLoader","Promise","value","subscribe","unsubscribe","receivers","publish","topic","subject","this","getTopicReceivers","map","receiver","resolve","push","eventBus","EventBus"],"mappings":"wHAAA,W,wPCCE,yBAIS,GAHPA,MAAM,mEAAiE,C,UAEvE,IAA8B,CAA9B,yBAA8B,GAAlBC,MAAM,c,wBCAP,+BAAgB,CAC7BC,KAAM,UACNC,WAAY,CACVC,WAAU,gBACVC,OAAM,e,UCHV,EAAOC,OAASA,EAChB,EAAOC,UAAY,kBAEJ,U,gGCDR,iC,+BAEgD,c,+BAAwB,M,kYAR7E,yBAqBe,Q,6BApBb,IAkBS,CAlBM,EAAAC,Q,iEAAf,yBAkBS,W,6BAjBP,IAOS,EALA,EAAAA,SAAW,EAAAC,MAAwB,IAAhB,EAAAA,KAAKC,Q,yBAFjC,yBAOS,G,MANPC,IAAI,KAEJX,MAAM,sC,8BACP,IAEC,C,EAAA,yBAAuE,GAAzDY,GAAI,CAAEV,KAAM,oBAAmB,C,6BAAE,IAAU,C,+CAE3D,yBAQS,W,6BAPP,IAMe,CANf,yBAMe,Q,6BAJX,IAA6B,E,2BAD/B,yBAIE,2CAHwB,EAAAO,KAAI,CAApBI,EAAMC,K,yBADhB,yBAIE,GAFCC,IAAKD,EACLL,KAAMI,G,mDAKf,yBAA2C,Q,6BAAnC,IAA0B,CAAX,EAAO,S,yBAAtB,yBAA0B,Y,6QCpBpC,yBAyBmB,KCfN,mCAAgB,CAC7BX,KAAM,qBACNC,WAAY,CAEVa,iBAAgB,uBAElBC,MAAO,CACLR,KAAM,CACJS,KAAMC,SAGVC,MAAK,SAACH,O,UCjBR,EAAOX,OAAS,EAChB,EAAOC,UAAY,kBAEJ,Q,oCCOA,+BAAgB,CAC7BL,KAAM,kBACNC,WAAY,CACVkB,mBAAkB,EAClBC,aAAY,kBACZC,OAAM,YACNlB,OAAM,YACNmB,aAAY,kBACZC,QAAO,QAETL,MAAA,sBACQ,EAAoB,eACxB,KACA,yBACA,WAAM,sBAAa,WAHbX,EAAI,OAAED,EAAO,UAMrB,SAAekB,I,kCAAcC,SAAO,W,qEAErB,OADbnB,EAAQoB,OAAQ,EAChB,EAAAnB,EAAa,GAAM,eACjB,KACA,yBACA,WAAM,sBAAa,Y,cAHrB,EAAKmB,MAAQ,SAKbpB,EAAQoB,OAAQ,E,WAWlB,OARA,OAASC,UAAU,0BAA0B,6D,+DAC3C,SAAMH,K,cAAN,S,cAGF,0BAAY,WACV,OAASI,YAAY,6BAGhB,CAAErB,KAAI,EAAED,QAAO,MC/C1B,EAAOF,OAASA,EAED,gB,2DCLf,W,2GCEA,0BACE,KAAAyB,UAEI,GAqCN,OApCe,YAAAC,QAAb,SAAqBC,EAAeC,G,kCAAmBP,SAAO,W,qDACtDI,EAAYI,KAAKC,kBAAkBH,GACzCF,EAAUM,KACR,SAACC,GAAa,WAAIX,SAAQ,SAACY,GAAY,OAAAA,EAAQD,EAASJ,U,WAGpD,YAAAE,kBAAR,SAA0BH,GACxB,OAAKE,KAAKJ,UAAUE,GAGbE,KAAKJ,UAAUE,GAFb,IAYJ,YAAAJ,UAAP,SAAiBI,EAAeK,GACzBH,KAAKJ,UAAUE,KAClBE,KAAKJ,UAAUE,GAAS,IAE1BE,KAAKJ,UAAUE,GAAOO,KAAKF,IAEtB,YAAAR,YAAP,SAAmBG,GAEZE,KAAKJ,UAAUE,KAMpBE,KAAKJ,UAAUE,GAAS,KAE5B,EAxCA,GA4DaQ,EAAW,IAAIC","file":"js/edit-categories-list.f162849e.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Spinner.vue?vue&type=style&index=0&id=2d917819&scoped=true&lang=scss\"","<template>\n  <MDBCol\n    class=\"d-flex justify-content-center align-items-center custom-spinner\"\n  >\n    <MDBSpinner color=\"primary\" />\n  </MDBCol>\n</template>\n\n<script lang=\"ts\">\nimport { MDBCol, MDBSpinner } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Spinner',\n  components: {\n    MDBSpinner,\n    MDBCol,\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n.custom-spinner {\n  position: fixed;\n  height: 80vh;\n  width: 100vw;\n}\n</style>\n","\nimport { MDBCol, MDBSpinner } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Spinner',\n  components: {\n    MDBSpinner,\n    MDBCol,\n  },\n})\n","import { render } from \"./Spinner.vue?vue&type=template&id=2d917819&scoped=true\"\nimport script from \"./Spinner.vue?vue&type=script&lang=ts\"\nexport * from \"./Spinner.vue?vue&type=script&lang=ts\"\n\nimport \"./Spinner.vue?vue&type=style&index=0&id=2d917819&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-2d917819\"\n\nexport default script","<template>\n  <MDBContainer>\n    <MDBRow v-if=\"!loading\">\n      <MDBCol\n        col=\"12\"\n        v-if=\"!loading && data && data.length === 0\"\n        class=\"d-flex justify-content-center pt-2\"\n      >\n        No categories yet. You can&thinsp;\n        <router-link :to=\"{ name: 'create-category' }\">create one</router-link>.\n      </MDBCol>\n      <MDBCol v-else>\n        <MDBListGroup>\n          <EditCategoriesItem\n            v-for=\"(item, index) in data\"\n            :key=\"index\"\n            :data=\"item\"\n          />\n        </MDBListGroup>\n      </MDBCol>\n    </MDBRow>\n    <MDBRow><Spinner v-if=\"loading\" /></MDBRow>\n  </MDBContainer>\n</template>\n\n<script lang=\"ts\">\nimport { MDBCol, MDBContainer, MDBListGroup, MDBRow } from 'mdb-vue-ui-kit'\nimport { defineComponent, onUnmounted } from 'vue'\n\nimport { graphqlFetch } from '@/services/GraphqlService/GraphqlService'\nimport { GET_CATEGORIES_EDITLIST } from '@/services/GraphqlService/queries/categoryQueries'\nimport EditCategoriesItem from '@/components/admin-layout/category/edit-categories/EditCategoriesItem.vue'\nimport Spinner from '@/components/Spinner.vue'\nimport { eventBus } from '@/helpers/EventBus'\nimport {\n  awaitFetcher,\n  reactiveFetcher,\n} from '@/services/FetchService/FetchService'\nimport { ProductEditItem } from '@/types/product'\n\nexport default defineComponent({\n  name: 'edit-categories',\n  components: {\n    EditCategoriesItem,\n    MDBContainer,\n    MDBRow,\n    MDBCol,\n    MDBListGroup,\n    Spinner,\n  },\n  setup() {\n    const { data, loading } = reactiveFetcher<ProductEditItem[]>(\n      'NF',\n      '/categories-edit-list',\n      () => graphqlFetch(GET_CATEGORIES_EDITLIST),\n    )\n\n    async function dataLoader(): Promise<void> {\n      loading.value = true\n      data.value = await awaitFetcher<ProductEditItem[]>(\n        'NF',\n        '/categories-edit-list',\n        () => graphqlFetch(GET_CATEGORIES_EDITLIST),\n      )\n      loading.value = false\n    }\n\n    eventBus.subscribe('edit-categories-update', async () => {\n      await dataLoader()\n    })\n\n    onUnmounted(() => {\n      eventBus.unsubscribe('edit-categories-update')\n    })\n\n    return { data, loading }\n  },\n})\n</script>\n\n<style scoped lang=\"scss\"></style>\n\n<!--<template>-->\n<!--  <EditList entity=\"category\" />-->\n<!--</template>-->\n\n<!--<script lang=\"ts\">-->\n<!--import { defineComponent } from 'vue'-->\n\n<!--import EditList from '@/components/admin-layout/EditList/EditList.vue'-->\n\n<!--export default defineComponent({-->\n<!--  name: 'EditCategoriesList',-->\n<!--  components: { EditList },-->\n<!--})-->\n<!--</script>-->\n\n<!--<style scoped lang=\"scss\"></style>-->\n","<template>\n  <MDBListGroupItem>\n    <!--    <div class=\"edit-item\">-->\n    <!--      <div class=\"edit-item__image\">-->\n    <!--        <ProductImage-->\n    <!--          height=\"140px\"-->\n    <!--          width=\"140px\"-->\n    <!--          :name=\"data.name\"-->\n    <!--          :images=\"[data.imgUrl]\"-->\n    <!--        />-->\n    <!--      </div>-->\n\n    <!--      <div class=\"edit-item__id\">ID: {{ data.id }}</div>-->\n\n    <!--      <div class=\"edit-item__name\">Name: {{ textSlicer(data.name, 20) }}</div>-->\n\n    <!--      <div class=\"edit-item__controls\">-->\n    <!--        <MDBBtn color=\"dark\" @click=\"removeItem\">Delete</MDBBtn>-->\n    <!--        <router-link-->\n    <!--          class=\"btn btn-light\"-->\n    <!--          :to=\"{ name: 'edit-category', params: { id: data.id } }\"-->\n    <!--        >-->\n    <!--          Edit-->\n    <!--        </router-link>-->\n    <!--      </div>-->\n    <!--    </div>-->\n  </MDBListGroupItem>\n</template>\n\n<script lang=\"ts\">\nimport { MDBBtn, MDBListGroupItem } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\nimport { useToast } from 'vue-toastification'\n\nimport ProductImage from '@/components/public-layout/Product/ProductImage.vue'\nimport { eventBus } from '@/helpers/EventBus'\nimport { graphqlDelete } from '@/services/GraphqlService/GraphqlService'\nimport { textSlicer } from '@/services/TextSlicerService/TextSlicerService'\nimport { CategoryEditItem } from '@/types/category'\n\nexport default defineComponent({\n  name: 'EditCategoriesItem',\n  components: {\n    // ProductImage, MDBBtn,\n    MDBListGroupItem,\n  },\n  props: {\n    data: {\n      type: Object as () => CategoryEditItem,\n    },\n  },\n  setup(props) {\n    // const toast = useToast()\n    // const removeItem = (): void => {\n    //   if (!props.data) return\n    //   graphqlDelete('category', props.data.id)\n    //   toast.error('Category has been deleted!')\n    //   eventBus.publish('edit-categories-update', undefined)\n    // }\n    // return { textSlicer, removeItem }\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n.edit-item {\n  width: 100%;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: 1fr 1fr 1fr;\n  gap: 5px 20px;\n  align-items: center;\n  grid-template-areas:\n    'image id'\n    'image name'\n    'image controls';\n  &__image {\n    grid-area: image;\n  }\n  &__id {\n    grid-area: id;\n    font-size: 0.8rem;\n  }\n  &__name {\n    grid-area: name;\n    font-weight: 500;\n  }\n  &__controls {\n    grid-area: controls;\n    justify-self: end;\n  }\n}\n</style>\n","\nimport { MDBBtn, MDBListGroupItem } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\nimport { useToast } from 'vue-toastification'\n\nimport ProductImage from '@/components/public-layout/Product/ProductImage.vue'\nimport { eventBus } from '@/helpers/EventBus'\nimport { graphqlDelete } from '@/services/GraphqlService/GraphqlService'\nimport { textSlicer } from '@/services/TextSlicerService/TextSlicerService'\nimport { CategoryEditItem } from '@/types/category'\n\nexport default defineComponent({\n  name: 'EditCategoriesItem',\n  components: {\n    // ProductImage, MDBBtn,\n    MDBListGroupItem,\n  },\n  props: {\n    data: {\n      type: Object as () => CategoryEditItem,\n    },\n  },\n  setup(props) {\n    // const toast = useToast()\n    // const removeItem = (): void => {\n    //   if (!props.data) return\n    //   graphqlDelete('category', props.data.id)\n    //   toast.error('Category has been deleted!')\n    //   eventBus.publish('edit-categories-update', undefined)\n    // }\n    // return { textSlicer, removeItem }\n  },\n})\n","import { render } from \"./EditCategoriesItem.vue?vue&type=template&id=6fa4cd7e&scoped=true\"\nimport script from \"./EditCategoriesItem.vue?vue&type=script&lang=ts\"\nexport * from \"./EditCategoriesItem.vue?vue&type=script&lang=ts\"\n\nimport \"./EditCategoriesItem.vue?vue&type=style&index=0&id=6fa4cd7e&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-6fa4cd7e\"\n\nexport default script","\nimport { MDBCol, MDBContainer, MDBListGroup, MDBRow } from 'mdb-vue-ui-kit'\nimport { defineComponent, onUnmounted } from 'vue'\n\nimport { graphqlFetch } from '@/services/GraphqlService/GraphqlService'\nimport { GET_CATEGORIES_EDITLIST } from '@/services/GraphqlService/queries/categoryQueries'\nimport EditCategoriesItem from '@/components/admin-layout/category/edit-categories/EditCategoriesItem.vue'\nimport Spinner from '@/components/Spinner.vue'\nimport { eventBus } from '@/helpers/EventBus'\nimport {\n  awaitFetcher,\n  reactiveFetcher,\n} from '@/services/FetchService/FetchService'\nimport { ProductEditItem } from '@/types/product'\n\nexport default defineComponent({\n  name: 'edit-categories',\n  components: {\n    EditCategoriesItem,\n    MDBContainer,\n    MDBRow,\n    MDBCol,\n    MDBListGroup,\n    Spinner,\n  },\n  setup() {\n    const { data, loading } = reactiveFetcher<ProductEditItem[]>(\n      'NF',\n      '/categories-edit-list',\n      () => graphqlFetch(GET_CATEGORIES_EDITLIST),\n    )\n\n    async function dataLoader(): Promise<void> {\n      loading.value = true\n      data.value = await awaitFetcher<ProductEditItem[]>(\n        'NF',\n        '/categories-edit-list',\n        () => graphqlFetch(GET_CATEGORIES_EDITLIST),\n      )\n      loading.value = false\n    }\n\n    eventBus.subscribe('edit-categories-update', async () => {\n      await dataLoader()\n    })\n\n    onUnmounted(() => {\n      eventBus.unsubscribe('edit-categories-update')\n    })\n\n    return { data, loading }\n  },\n})\n","import { render } from \"./edit-categories.vue?vue&type=template&id=7deb60ca\"\nimport script from \"./edit-categories.vue?vue&type=script&lang=ts\"\nexport * from \"./edit-categories.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","export * from \"-!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./EditCategoriesItem.vue?vue&type=style&index=0&id=6fa4cd7e&scoped=true&lang=scss\"","import { EventBusInterface, Receiver, Subject } from '@/types/eventBus'\n\nclass EventBus implements EventBusInterface {\n  receivers: {\n    [key: string]: Receiver[]\n  } = {}\n  public async publish(topic: string, subject: Subject): Promise<void> {\n    const receivers = this.getTopicReceivers(topic)\n    receivers.map(\n      (receiver) => new Promise((resolve) => resolve(receiver(subject))),\n    )\n  }\n  private getTopicReceivers(topic: string): Receiver[] {\n    if (!this.receivers[topic]) {\n      return []\n    }\n    return this.receivers[topic]\n  }\n  // private retryPublish(\n  //   topic: string,\n  //   subject: Subject,\n  //   receiver: Receiver\n  // ): void {\n  //   receiver(subject)\n  // }\n\n  public subscribe(topic: string, receiver: Receiver): void {\n    if (!this.receivers[topic]) {\n      this.receivers[topic] = []\n    }\n    this.receivers[topic].push(receiver)\n  }\n  public unsubscribe(topic: string): void {\n    // public unsubscribe(topic: string): void {\n    if (!this.receivers[topic]) {\n      return\n    }\n    // this.receivers[topic] = this.receivers[topic].filter(\n    //   item => item !== receiver\n    // )\n    this.receivers[topic] = []\n  }\n}\n\n// class SmsNotificationService implements Receiver {\n//   receive(topic: string, subject: Subject): void {\n//     console.log('Sms event received', topic, subject)\n//   }\n// }\n//\n// class CustomReceiver implements Receiver {\n//   receive(topic: string, subject: Subject): void {\n//     console.log('Event received', topic, subject)\n//   }\n// }\n//\n// class EmailNotificationService implements Receiver {\n//   receive(topic: string, subject: Subject): void {\n//     console.log('Email event received', topic, subject)\n//   }\n// }\n\nexport const eventBus = new EventBus()\n// export const customReceiver = new CustomReceiver()\n// const emailService = new EmailNotificationService()\n\n// eventBus.subscribe('notification', smsService)\n// eventBus.subscribe('notification', emailService)\n//\n// eventBus.publish('notification', 'name')\n//\n// eventBus.unsubscribe('notification', smsService)\n// eventBus.publish('notification', 'name 2')\n\n// // /* eslint-disable */\n// class EventBus {\n//   events: any\n//   constructor() {\n//     this.events = {}\n//   }\n//\n//   on(eventName: string, fn: any): void {\n//     console.log(fn)\n//     this.events[eventName] = this.events[eventName] || []\n//     this.events[eventName].push(fn)\n//   }\n//\n//   // off(eventName, fn) {\n//   //   if (this.events[eventName]) {\n//   //     for (let i = 0; i < this.events[eventName].length; i++) {\n//   //       if (this.events[eventName][i] === fn) {\n//   //         this.events[eventName].splice(i, 1)\n//   //         break\n//   //       }\n//   //     }\n//   //   }\n//   // }\n//   emit(eventName: string, data: any): void {\n//     if (this.events[eventName]) {\n//       this.events[eventName].forEach(function(fn: any) {\n//         fn(data)\n//       })\n//     }\n//   }\n// }\n//\n// export default new EventBus()\n"],"sourceRoot":""}