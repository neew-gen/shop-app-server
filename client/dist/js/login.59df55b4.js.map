{"version":3,"sources":["webpack:///./src/views/auth-layout/login/login.vue?b6d0","webpack:///./src/views/auth-layout/login/login.vue","webpack:///./src/views/auth-layout/login/login.vue?28a4","webpack:///./src/views/auth-layout/login/login.vue?bff9"],"names":["class","tag","onSubmit","col","label","values","email","errors","type","showPassword","password","color","changeShowPassword","icon","iconStyle","name","components","ErrorField","MDBInput","MDBBtn","MDBRow","MDBCol","MDBContainer","MDBIcon","setup","toast","schema","required","min","validationSchema","initialValues","meta","setFieldError","value","Promise","username","res","error","router","push","sessionStorage","getItem","success","render","__scopeId"],"mappings":"gIAAA,W,kKCSaA,MAAM,kB,+BAuBsC,W,6YA/BvD,yBAkCe,Q,UAjCb,IAgCS,CAhCT,yBAgCS,GAhCDC,IAAI,OAAOD,MAAM,MAAO,SAAM,2BAAU,EAAAE,SAAQ,c,WACtD,IAGS,CAHT,yBAGS,GAHDC,IAAI,MAAI,C,UACd,IAAiD,CAAjD,yBAAiD,GAAvCC,MAAM,Q,WAAiB,EAAAC,OAAOC,M,qCAAP,EAAAD,OAAOC,MAAK,I,uBAC7C,yBAA6C,Q,UAAhC,IAAkB,C,0DAAf,EAAAC,OAAOD,OAAK,K,cAG9B,yBAoBS,GApBDH,IAAI,MAAI,C,UACd,IAiBM,CAjBN,yBAiBM,MAjBN,EAiBM,CAhBJ,yBAKE,GAJAH,MAAM,wBACNI,MAAM,WACLI,KAAM,EAAAC,aAAe,OAAS,W,WACtB,EAAAJ,OAAOK,S,qCAAP,EAAAL,OAAOK,SAAQ,I,8BAE1B,yBASS,GARPV,MAAM,uBACNW,MAAM,OACL,QAAO,EAAAC,oB,WAER,IAGE,CAHF,yBAGE,GAFCC,KAAM,EAAAJ,aAAe,YAAc,MACpCK,UAAU,O,yCAIhB,yBAAgD,Q,UAAnC,IAAqB,C,0DAAlB,EAAAP,OAAOG,UAAQ,K,cAGjC,yBAGS,Q,UADP,IAAiE,CAAjE,yBAAiE,GAAzDC,MAAM,OAAOX,MAAM,QAAQQ,KAAK,U,WAAS,IAAO,C,uJCdjD,+BAAgB,CAC7BO,KAAM,QACNC,WAAY,CACVC,WAAU,OACVC,SAAQ,cACRC,OAAM,YACNC,OAAM,YACNC,OAAM,YACNC,aAAY,kBACZC,QAAO,cAETC,MAAA,sBACQC,EAAQ,iBACRhB,EAAe,kBAAI,GACnBiB,EAAS,eAAO,CACpBpB,MAAO,iBAASqB,WAAWrB,QAAQF,MAAM,SACzCM,SAAU,iBAASiB,WAAWC,IAAI,GAAGxB,MAAM,cAGvC,EAA0C,eAAQ,CACtDyB,iBAAkBH,EAClBI,cAAe,CAAExB,MAAO,GAAII,SAAU,MAFhCL,EAAM,SAAEE,EAAM,SAAEwB,EAAI,OAAEC,EAAa,gBAI3C,eAAiB,SACjB,eAAiB,YAEjB,IAAMpB,EAAqB,WACzBH,EAAawB,OAASxB,EAAawB,OAG/B/B,EAAW,0CAAUgC,SAAO,W,yEAEhC,OADQ5B,EAAoBD,EAAM,MAAnBK,EAAaL,EAAM,SAC5BC,GAASI,EAEH,GAAM,eAAM,CACtByB,SAAU7B,EACVI,SAAUA,KAJc,I,cAEpB0B,EAAM,SAIA,0BAARA,IACFJ,EAAc,QAAS,uBACvBP,EAAMY,MAAM,wBAEF,6BAARD,IACFJ,EAAc,WAAY,0BAC1BP,EAAMY,MAAM,2BAEF,4BAARD,GACFX,EAAMY,MAAM,2BAEF,YAARD,EAAA,MACF,GAAME,EAAA,KAAOC,KACXC,eAAeC,QAAQ,0BAA4B,a,OADrD,SAGAhB,EAAMiB,QAAQ,qB,mCAIlB,MAAO,CACLjC,aAAY,EACZJ,OAAM,EACNE,OAAM,EACNwB,KAAI,EACJnB,mBAAkB,EAClBV,SAAQ,M,UC5Ed,EAAOyC,OAASA,EAChB,EAAOC,UAAY,kBAEJ","file":"js/login.59df55b4.js","sourcesContent":["export * from \"-!../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./login.vue?vue&type=style&index=0&id=7d040266&scoped=true&lang=scss\"","<template>\n  <MDBContainer>\n    <MDBRow tag=\"form\" class=\"g-3\" @submit.prevent=\"onSubmit\">\n      <MDBCol col=\"12\">\n        <MDBInput label=\"Email\" v-model=\"values.email\" />\n        <ErrorField> {{ errors.email }} </ErrorField>\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <div class=\"password-block\">\n          <MDBInput\n            class=\"password-block__input\"\n            label=\"Password\"\n            :type=\"showPassword ? 'text' : 'password'\"\n            v-model=\"values.password\"\n          />\n          <MDBBtn\n            class=\"password-block__show\"\n            color=\"dark\"\n            @click=\"changeShowPassword\"\n          >\n            <MDBIcon\n              :icon=\"showPassword ? 'eye-slash' : 'eye'\"\n              iconStyle=\"fas\"\n            />\n          </MDBBtn>\n        </div>\n        <ErrorField> {{ errors.password }} </ErrorField>\n      </MDBCol>\n\n      <MDBCol>\n        <!--        :disabled=\"!meta.valid\"-->\n        <MDBBtn color=\"dark\" class=\"w-100\" type=\"submit\"> Login </MDBBtn>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n</template>\n\n<script lang=\"ts\">\nimport {\n  MDBBtn,\n  MDBCol,\n  MDBContainer,\n  MDBIcon,\n  MDBInput,\n  MDBRow,\n} from 'mdb-vue-ui-kit'\nimport { useField, useForm } from 'vee-validate'\nimport { defineComponent, ref } from 'vue'\nimport { useToast } from 'vue-toastification'\nimport { object, string } from 'yup'\n\nimport ErrorField from '@/components/ErrorField.vue'\nimport router from '@/router'\nimport { login } from '@/services/JwtService/requests'\n\nexport default defineComponent({\n  name: 'login',\n  components: {\n    ErrorField,\n    MDBInput,\n    MDBBtn,\n    MDBRow,\n    MDBCol,\n    MDBContainer,\n    MDBIcon,\n  },\n  setup() {\n    const toast = useToast()\n    const showPassword = ref(false)\n    const schema = object({\n      email: string().required().email().label('Email'),\n      password: string().required().min(4).label('Password'),\n    })\n\n    const { values, errors, meta, setFieldError } = useForm({\n      validationSchema: schema,\n      initialValues: { email: '', password: '' },\n    })\n    useField<string>('email')\n    useField<string>('password')\n\n    const changeShowPassword = (): void => {\n      showPassword.value = !showPassword.value\n    }\n\n    const onSubmit = async (): Promise<void> => {\n      const { email, password } = values\n      if (!(email && password)) return\n      // TODO need to bcrypt this\n      const res = await login({\n        username: email,\n        password: password,\n      })\n      if (res === 'The login is invalid.') {\n        setFieldError('email', 'Email is incorrect.')\n        toast.error('Email is incorrect.')\n      }\n      if (res === 'The password is invalid.') {\n        setFieldError('password', 'Password is incorrect.')\n        toast.error('Password is incorrect.')\n      }\n      if (res === 'You do not have access.') {\n        toast.error('You do not have access.')\n      }\n      if (res === 'Logged.') {\n        await router.push(\n          sessionStorage.getItem('redirectPathAfterAuth') || '/profile',\n        )\n        toast.success('Successful login!')\n      }\n    }\n\n    return {\n      showPassword,\n      values,\n      errors,\n      meta,\n      changeShowPassword,\n      onSubmit,\n    }\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n.password-block {\n  width: 100%;\n  display: grid;\n  grid-template-columns: 1fr auto;\n  grid-template-areas: 'input show';\n  &__input {\n    grid-area: input;\n  }\n  &__show {\n    grid-area: show;\n    width: 40px;\n    padding: 0;\n  }\n}\n</style>\n","\nimport {\n  MDBBtn,\n  MDBCol,\n  MDBContainer,\n  MDBIcon,\n  MDBInput,\n  MDBRow,\n} from 'mdb-vue-ui-kit'\nimport { useField, useForm } from 'vee-validate'\nimport { defineComponent, ref } from 'vue'\nimport { useToast } from 'vue-toastification'\nimport { object, string } from 'yup'\n\nimport ErrorField from '@/components/ErrorField.vue'\nimport router from '@/router'\nimport { login } from '@/services/JwtService/requests'\n\nexport default defineComponent({\n  name: 'login',\n  components: {\n    ErrorField,\n    MDBInput,\n    MDBBtn,\n    MDBRow,\n    MDBCol,\n    MDBContainer,\n    MDBIcon,\n  },\n  setup() {\n    const toast = useToast()\n    const showPassword = ref(false)\n    const schema = object({\n      email: string().required().email().label('Email'),\n      password: string().required().min(4).label('Password'),\n    })\n\n    const { values, errors, meta, setFieldError } = useForm({\n      validationSchema: schema,\n      initialValues: { email: '', password: '' },\n    })\n    useField<string>('email')\n    useField<string>('password')\n\n    const changeShowPassword = (): void => {\n      showPassword.value = !showPassword.value\n    }\n\n    const onSubmit = async (): Promise<void> => {\n      const { email, password } = values\n      if (!(email && password)) return\n      // TODO need to bcrypt this\n      const res = await login({\n        username: email,\n        password: password,\n      })\n      if (res === 'The login is invalid.') {\n        setFieldError('email', 'Email is incorrect.')\n        toast.error('Email is incorrect.')\n      }\n      if (res === 'The password is invalid.') {\n        setFieldError('password', 'Password is incorrect.')\n        toast.error('Password is incorrect.')\n      }\n      if (res === 'You do not have access.') {\n        toast.error('You do not have access.')\n      }\n      if (res === 'Logged.') {\n        await router.push(\n          sessionStorage.getItem('redirectPathAfterAuth') || '/profile',\n        )\n        toast.success('Successful login!')\n      }\n    }\n\n    return {\n      showPassword,\n      values,\n      errors,\n      meta,\n      changeShowPassword,\n      onSubmit,\n    }\n  },\n})\n","import { render } from \"./login.vue?vue&type=template&id=7d040266&scoped=true\"\nimport script from \"./login.vue?vue&type=script&lang=ts\"\nexport * from \"./login.vue?vue&type=script&lang=ts\"\n\nimport \"./login.vue?vue&type=style&index=0&id=7d040266&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-7d040266\"\n\nexport default script"],"sourceRoot":""}