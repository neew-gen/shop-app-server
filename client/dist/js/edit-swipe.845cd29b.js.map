{"version":3,"sources":["webpack:///./src/components/Spinner.vue?7726","webpack:///./src/components/Spinner.vue","webpack:///./src/components/Spinner.vue?2236","webpack:///./src/components/Spinner.vue?8361","webpack:///./src/views/admin-layout/swipe/edit-swipe.vue","webpack:///./src/components/admin-layout/swipe/edit-swipe/EditSwipeTemplate.vue","webpack:///./src/components/admin-layout/swipe/edit-swipe/EditSwipeTemplate.vue?ae67","webpack:///./src/components/admin-layout/swipe/edit-swipe/EditSwipeTemplate.vue?c01e","webpack:///./src/views/admin-layout/swipe/edit-swipe.vue?cee4","webpack:///./src/views/admin-layout/swipe/edit-swipe.vue?0e0a"],"names":["class","color","name","components","MDBSpinner","MDBCol","render","__scopeId","default","id","fallback","tag","onSubmit","col","data","values","label","imgUrl","errors","title","rows","text","type","disabled","meta","dirty","valid","ErrorField","MDBContainer","MDBRow","Swipe","MDBInput","MDBTextarea","MDBBtn","props","String","required","setup","toast","schema","min","url","validationSchema","initialValues","reset","value","swipeData","success","res","EditSwipeTemplate","Spinner"],"mappings":"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","file":"js/edit-swipe.845cd29b.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Spinner.vue?vue&type=style&index=0&id=2d917819&scoped=true&lang=scss\"","<template>\n  <MDBCol\n    class=\"d-flex justify-content-center align-items-center custom-spinner\"\n  >\n    <MDBSpinner color=\"primary\" />\n  </MDBCol>\n</template>\n\n<script lang=\"ts\">\nimport { MDBCol, MDBSpinner } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Spinner',\n  components: {\n    MDBSpinner,\n    MDBCol,\n  },\n})\n</script>\n\n<style scoped lang=\"scss\">\n.custom-spinner {\n  position: fixed;\n  height: 80vh;\n  width: 100vw;\n}\n</style>\n","\nimport { MDBCol, MDBSpinner } from 'mdb-vue-ui-kit'\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'Spinner',\n  components: {\n    MDBSpinner,\n    MDBCol,\n  },\n})\n","import { render } from \"./Spinner.vue?vue&type=template&id=2d917819&scoped=true\"\nimport script from \"./Spinner.vue?vue&type=script&lang=ts\"\nexport * from \"./Spinner.vue?vue&type=script&lang=ts\"\n\nimport \"./Spinner.vue?vue&type=style&index=0&id=2d917819&scoped=true&lang=scss\"\nscript.render = render\nscript.__scopeId = \"data-v-2d917819\"\n\nexport default script","<template>\n  <Suspense>\n    <template #default>\n      <EditSwipeTemplate :id=\"id\" />\n    </template>\n    <template #fallback>\n      <Spinner />\n    </template>\n  </Suspense>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nimport EditSwipeTemplate from '@/components/admin-layout/swipe/edit-swipe/EditSwipeTemplate.vue'\nimport Spinner from '@/components/Spinner.vue'\n\nexport default defineComponent({\n  name: 'edit-swipe',\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  components: {\n    EditSwipeTemplate,\n    Spinner,\n  },\n})\n</script>\n\n<style scoped lang=\"scss\"></style>\n","<template>\n  <MDBContainer>\n    <MDBRow tag=\"form\" class=\"g-3\" @submit.prevent=\"onSubmit\">\n      <MDBCol col=\"12\">\n        <Swipe :data=\"values\" />\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <MDBInput label=\"Image Url\" v-model=\"values.imgUrl\" />\n        <ErrorField>{{ errors.imgUrl }}</ErrorField>\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <MDBInput label=\"Swipe title\" v-model=\"values.title\" />\n        <ErrorField>{{ errors.title }}</ErrorField>\n      </MDBCol>\n\n      <MDBCol col=\"12\">\n        <MDBTextarea label=\"Swipe text\" rows=\"4\" v-model=\"values.text\" />\n        <ErrorField>{{ errors.text }}</ErrorField>\n      </MDBCol>\n\n      <MDBCol col=\"12\" class=\"d-flex justify-content-end\">\n        <MDBBtn\n          color=\"light\"\n          type=\"submit\"\n          :disabled=\"!meta.dirty || !meta.valid\"\n        >\n          Save changes\n        </MDBBtn>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n</template>\n\n<script lang=\"ts\">\nimport {\n  MDBBtn,\n  MDBCol,\n  MDBContainer,\n  MDBInput,\n  MDBRow,\n  MDBTextarea,\n} from 'mdb-vue-ui-kit'\nimport { useField, useForm } from 'vee-validate'\nimport { defineComponent } from 'vue'\nimport { useToast } from 'vue-toastification'\nimport { object, string } from 'yup'\n\nimport { awaitFetcher } from '@/api/fetch'\nimport { graphqlFetchBy, graphqlUpdate } from '@/api/graphql-api/GraphqlApi'\nimport { GET_SWIPE_BY_ID } from '@/api/graphql-api/queries/swipeQueries'\nimport ErrorField from '@/components/ErrorField.vue'\nimport { SwipeType, UpdateSwipeInput } from '@/types/swipe'\nimport Swipe from '@/views/PublicLayout/home/HomeComponents/HomeContent/HomeSwiper/Swipe.vue'\n\nexport default defineComponent({\n  name: 'EditSwipe',\n  components: {\n    ErrorField,\n    MDBContainer,\n    MDBRow,\n    MDBCol,\n    Swipe,\n    MDBInput,\n    MDBTextarea,\n    MDBBtn,\n  },\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  async setup(props) {\n    const toast = useToast()\n\n    const schema = object({\n      title: string().required().min(4).label('Swipe title'),\n      imgUrl: string().required().url().label('Image URL'),\n      text: string().required().min(10).label('Swipe text'),\n    })\n\n    const { values, errors, meta } = useForm({\n      validationSchema: schema,\n      initialValues: { title: '', imgUrl: '', text: '' },\n    })\n    useField<string>('title')\n    useField<string>('imgUrl')\n    useField<string>('text')\n\n    const reset = (): void => {\n      meta.value.valid = false\n    }\n\n    const onSubmit = (): void => {\n      const { title, imgUrl, text } = values\n      if (!(title && imgUrl && text)) return\n\n      graphqlUpdate<UpdateSwipeInput>('swipe', props.id, {\n        swipeData: { title, imgUrl, text },\n      })\n      reset()\n      toast.success('Swipe has been edited!')\n    }\n\n    const res = await awaitFetcher<SwipeType>(\n      'NF',\n      `/edit-swipe-${props.id}`,\n      () => graphqlFetchBy(GET_SWIPE_BY_ID, { id: props.id! }),\n    )\n\n    // TODO need to improve this\n    const { title, imgUrl, text } = res!.swipeData\n    values.title = meta.value.initialValues.title = title\n    values.imgUrl = meta.value.initialValues.imgUrl = imgUrl\n    values.text = meta.value.initialValues.text = text\n\n    return { values, errors, meta, onSubmit }\n  },\n})\n</script>\n\n<style scoped lang=\"scss\"></style>\n","\nimport {\n  MDBBtn,\n  MDBCol,\n  MDBContainer,\n  MDBInput,\n  MDBRow,\n  MDBTextarea,\n} from 'mdb-vue-ui-kit'\nimport { useField, useForm } from 'vee-validate'\nimport { defineComponent } from 'vue'\nimport { useToast } from 'vue-toastification'\nimport { object, string } from 'yup'\n\nimport { awaitFetcher } from '@/api/fetch'\nimport { graphqlFetchBy, graphqlUpdate } from '@/api/graphql-api/GraphqlApi'\nimport { GET_SWIPE_BY_ID } from '@/api/graphql-api/queries/swipeQueries'\nimport ErrorField from '@/components/ErrorField.vue'\nimport { SwipeType, UpdateSwipeInput } from '@/types/swipe'\nimport Swipe from '@/views/PublicLayout/home/HomeComponents/HomeContent/HomeSwiper/Swipe.vue'\n\nexport default defineComponent({\n  name: 'EditSwipe',\n  components: {\n    ErrorField,\n    MDBContainer,\n    MDBRow,\n    MDBCol,\n    Swipe,\n    MDBInput,\n    MDBTextarea,\n    MDBBtn,\n  },\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  async setup(props) {\n    const toast = useToast()\n\n    const schema = object({\n      title: string().required().min(4).label('Swipe title'),\n      imgUrl: string().required().url().label('Image URL'),\n      text: string().required().min(10).label('Swipe text'),\n    })\n\n    const { values, errors, meta } = useForm({\n      validationSchema: schema,\n      initialValues: { title: '', imgUrl: '', text: '' },\n    })\n    useField<string>('title')\n    useField<string>('imgUrl')\n    useField<string>('text')\n\n    const reset = (): void => {\n      meta.value.valid = false\n    }\n\n    const onSubmit = (): void => {\n      const { title, imgUrl, text } = values\n      if (!(title && imgUrl && text)) return\n\n      graphqlUpdate<UpdateSwipeInput>('swipe', props.id, {\n        swipeData: { title, imgUrl, text },\n      })\n      reset()\n      toast.success('Swipe has been edited!')\n    }\n\n    const res = await awaitFetcher<SwipeType>(\n      'NF',\n      `/edit-swipe-${props.id}`,\n      () => graphqlFetchBy(GET_SWIPE_BY_ID, { id: props.id! }),\n    )\n\n    // TODO need to improve this\n    const { title, imgUrl, text } = res!.swipeData\n    values.title = meta.value.initialValues.title = title\n    values.imgUrl = meta.value.initialValues.imgUrl = imgUrl\n    values.text = meta.value.initialValues.text = text\n\n    return { values, errors, meta, onSubmit }\n  },\n})\n","import { render } from \"./EditSwipeTemplate.vue?vue&type=template&id=326929ca\"\nimport script from \"./EditSwipeTemplate.vue?vue&type=script&lang=ts\"\nexport * from \"./EditSwipeTemplate.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport { defineComponent } from 'vue'\n\nimport EditSwipeTemplate from '@/components/admin-layout/swipe/edit-swipe/EditSwipeTemplate.vue'\nimport Spinner from '@/components/Spinner.vue'\n\nexport default defineComponent({\n  name: 'edit-swipe',\n  props: {\n    id: {\n      type: String,\n      required: true,\n    },\n  },\n  components: {\n    EditSwipeTemplate,\n    Spinner,\n  },\n})\n","import { render } from \"./edit-swipe.vue?vue&type=template&id=323cd240\"\nimport script from \"./edit-swipe.vue?vue&type=script&lang=ts\"\nexport * from \"./edit-swipe.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}